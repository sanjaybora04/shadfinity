{
  "$schema": "https://ui.shadcn.com/registry.json",
  "name": "chatbot",
  "type": "registry:component",
  "title": "Chatbot",
  "description": "A simple chatbot component with customisable flow",
  "registryDependencies": [
    "button","card","input"
  ],
  "dependencies": ["@radix-ui/react-scroll-area"],
  "author": "Sanjay bora",
  "files": [
    {
      "path": "components/chatbot.tsx",
      "target": "components/chatbot.tsx",
      "type": "registry:component",
      "content": "\"use client\"\n\nimport Chatbot from \"@/components/ui/chatbot\"\nimport { useState } from \"react\"\n\nexport default function ChatbotDemo(){\n    const [state,setState] = useState<any>()\n    return (\n        <Chatbot config={{\n            name: \"Chatbot\",\n            image: \"https://shadfinity.sanjaybora.in/images/chatbot.png\",\n            initialStep: 'start',\n            tooltip: 'Hello',\n            flow: {\n                start: {\n                    delay: 500,\n                    message: 'Hi, How may I help you?',\n                    options: ['What can you do?','Form example'],\n                    inputboxDisabled:true,\n                    next:(value:any)=>{\n                        if(value==\"What can you do?\"){\n                            return \"what_can_you_do\"\n                        }\n                        else if(value==\"Form example\"){\n                            return \"form_start\"\n                        }\n                        else{\n                            return \"start\"\n                        }\n                    }\n                },\n                what_can_you_do:{\n                    delay:500,\n                    message: \"I can do anything\",\n                    autoNext:true,\n                    next: 'start'\n                },\n                //form\n                form_start:{\n                    delay:500,\n                    message:\"What is your name?\",\n                    validation: (value:any)=>{\n                        if(value.length<3){\n                            return \"⚠️ Name must be atleast three characters long\"\n                        }else{\n                            setState((prev:any)=>({...prev,name:value}))\n                            return true\n                        }\n                    },\n                    next: \"ask_age\"\n                },\n                ask_age:{\n                    delay:500,\n                    message: \"What is your age?\",\n                    validation: (value:any)=>{\n                        if(isNaN(value)){\n                            return \"⚠️ Age must be numeric\"\n                        }else if(value<1||value>100){\n                            return \"⚠️ Age can't be less than 1 or more than 100\"\n                        }else{\n                            setState((prev:any)=>({...prev,age:value}))\n                            return true\n                        }\n                    },\n                    next: 'form_finish'\n                },\n                form_finish:{\n                    delay:500,\n                    message: `Thank you ${state?.name} for your response.\\n Your age - ${state?.age} has been recorded`,\n                    autoNext:true,\n                    next: ()=>{\n                        window.alert(`Name:${state?.name}\\nAge:${state?.age}`)\n                        return 'start'\n                    }\n                }\n            }\n        }} />\n    )\n}"
    },
    {
      "path": "components/ui/chatbot.tsx",
      "target": "components/ui/chatbot.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\nimport { RefreshCcw, Send, X } from \"lucide-react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { Input } from \"@/components/ui/input\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\ntype flowNode = {\n    message?: string,\n    options?: string[],\n    inputboxDisabled?: boolean,\n    validation?: ((value: any) => Promise<boolean | string> | boolean | string)\n    next?: string | ((value: any) => string),\n    delay?: number,\n    autoNext?: boolean\n}\n\nexport type configType = {\n    name: string,\n    image?: string,\n    initialStep: string,\n    tooltip?: string,\n    defaultOpen?: {\n        open: boolean,\n        delay?: number\n    },\n    flow: {\n        [key: string]: flowNode\n    }\n}\n\nfunction Loader({ image }: { image: string }) {\n    return (\n        <div className=\"my-2 flex gap-2\">\n            <img src={image} className=\"bg-primary text-primary-foreground rounded-full w-10 h-10 flex-none border border-primary\" />\n            <div className=\"p-2 bg-secondary rounded-lg flex items-center gap-1\">\n                <div className=\"w-2 h-2 rounded-lg bg-primary animate-bounce\"></div>\n                <div className=\"w-2 h-2 rounded-lg bg-primary animate-bounce delay-100\"></div>\n                <div className=\"w-2 h-2 rounded-lg bg-primary animate-bounce delay-200\"></div>\n            </div>\n        </div>\n    )\n}\n\nfunction UserMessage({ msg }: { msg: any }) {\n    return (\n        <div className=\"flex justify-end my-2\">\n            <div className=\"bg-primary text-primary-foreground p-2 rounded-lg whitespace-pre-line\">\n                {msg}\n            </div>\n        </div>\n    )\n}\n\nfunction Message({ message, image }: { message: any, image: string }) {\n    return (\n        <div className=\"flex gap-2 my-2\">\n            <img src={image} className=\"bg-primary text-primary-foreground rounded-full w-10 h-10 flex-none border border-primary\" />\n            <div>\n                <div className=\"p-2 bg-secondary rounded-lg rounded-b-none whitespace-break-spaces\">{message}</div>\n            </div>\n        </div>\n    )\n}\n\nfunction SingleChoice({ items, onClick }: { items: string[], onClick: any }) {\n    const [formopen, setFormOpen] = useState(true)\n    const [val, setVal] = useState('')\n    return (\n        <>\n            <div className=\"flex flex-col gap-2\">\n                {\n                    formopen && <div className=\"grid grid-cols-2 gap-3\">\n                        {\n                            items.map((item, index) => {\n                                return (\n                                    <div key={index} onClick={() => {\n                                        if (val == '') {\n                                            onClick(item);\n                                            setVal(item)\n                                        }\n                                    }} className=\"w-full\">\n                                        <Button className=\"flex w-full h-full flex-col py-2 px-2 hover:shadow-md\" variant={val == item ? 'default' : \"outline\"}>\n                                            {item}\n                                        </Button>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                }\n            </div>\n        </>\n    )\n}\n\nexport default function Chatbot({ config }: { config: configType }) {\n    const configRef = useRef<configType>(config)\n    const scrollViewportRef = useRef<any>(null)\n    const inputRef = useRef<any>(null)\n    const [open, setOpen] = useState(false)\n    const [messages, setMessages] = useState<any>([])\n    const [input, setInput] = useState('')\n    const [currentStep, setCurrentStep] = useState<string>(configRef.current.initialStep)\n\n    async function validate(val: any, _step: string) {\n        const step = configRef.current.flow[_step]\n        const v = await step.validation?.(val)\n        if (v == true) {\n            return true\n        } else if (v == false) {\n            setMessages((prev: any) => ([...prev, <Message image={configRef.current.image!} message={'⚠️Invalid Input!! Try again'} key={prev.length} />]))\n            return false\n        } else {\n            setMessages((prev: any) => ([...prev, <Message image={configRef.current.image!} message={v} key={prev.length} />]))\n            return false\n        }\n    }\n\n    async function onInput(val: any, _step: string) {\n        const step = configRef.current.flow[_step]\n        // validation\n        if (step.validation) {\n            if (await validate(val, _step) != true) {\n                return\n            }\n        }\n\n        // get next step\n        const nextStep = (typeof step.next === 'function' ? step.next(val) : step.next) || \"\"\n\n        // update messages\n        setMessages((prev: any) => ([...prev, <UserMessage msg={val} key={prev.length} />]))\n        addMessage(nextStep)\n\n        // update states\n        setCurrentStep(nextStep)\n        setInput('')\n    }\n\n    function addMessage(_step: string) {\n        const step = configRef.current.flow[_step]\n\n        // set input disabled\n        if (step.inputboxDisabled) { if (inputRef.current) inputRef.current.disabled = true }\n        else { if (inputRef.current) inputRef.current.disabled = false }\n\n        // add message\n        setMessages((prev: any) => ([...prev, <Loader key={prev.length} image={configRef.current.image!} />]))\n        setTimeout(() => {\n            setMessages((prev: any) => {\n                const m = prev.slice(0, -1);\n                if (step.message) {\n                    m.push(<Message message={step.message} key={m.length} image={configRef.current.image!} />)\n                }\n                if (step.options) {\n                    m.push(<SingleChoice items={step.options!} onClick={(val: any) => onInput(val, _step)} key={m.length} />)\n                }\n                return [...m]\n            })\n\n            if (step.autoNext) {\n                const nextStep = (typeof step.next === 'function' ? step.next('') : step.next) || ''\n                setCurrentStep(nextStep);\n                addMessage(nextStep)\n            }\n        }, step.delay)\n    }\n\n    function reload() {\n        setMessages([])\n        addMessage(config.initialStep)\n    }\n\n    let isMounted = false;\n    useEffect(() => {\n        if (!isMounted) {\n            // default open state\n            if (configRef.current.defaultOpen?.open) {\n                setTimeout(() => setOpen(true), configRef.current.defaultOpen?.delay)\n            }\n            // add first message\n            addMessage(currentStep)\n            isMounted = true\n        }\n    }, [])\n\n    useEffect(() => { configRef.current = config }, [config])\n\n    // scroll to bottom whenever messages are updated\n    useEffect(() => {\n        const viewport = scrollViewportRef.current;\n        if (viewport) {\n            viewport.scrollTo({\n                top: viewport.scrollHeight,\n                behavior: \"smooth\", // Smooth scrolling effect\n            });\n        }\n    }, [messages])\n    return (\n        <div className=\"fixed z-50 bottom-5 right-5 sm:bottom-10 sm:right-10\">\n            <div className=\"relative\">\n                <button className=\"flex items-center gap-4\" onClick={() => setOpen(true)}>\n                    {configRef.current.tooltip &&\n                        <div className=\" bg-background p-2 shadow border rounded-xl rounded-br-none max-w-64\">{configRef.current.tooltip}</div>\n                    }\n                    <img src={configRef.current.image} className=\"w-16 h-16 object-cover rounded-full border border-primary\" />\n                </button>\n                {open &&\n                    <Card className={cn(\"absolute right-0  bottom-0 h-[75vh] max-h-[600px] w-[calc(100vw-40px)] sm:w-96 rounded-xl p-3 flex flex-col duration-300\", open && \"animate-in zoom-in slide-in-from-bottom slide-in-from-right\")}>\n                        <div className=\"bg-primary text-primary-foreground h-12 w-full rounded-xl flex justify-between p-2 px-3\">\n                            <div className=\"flex gap-3 items-center\">\n                                <img src={configRef.current.image} className=\"w-8 h-8 rounded-full\" />\n                                {configRef.current.name}\n                            </div>\n                            <div className=\"flex gap-2\">\n                                <button className=\"hover:bg-primary-foreground hover:text-primary rounded-lg duration-300 p-1\"\n                                    onClick={() => reload()}\n                                >\n                                    <RefreshCcw />\n                                </button>\n                                <button className=\"hover:bg-primary-foreground hover:text-primary rounded-lg duration-300 p-1\"\n                                    onClick={() => setOpen(false)}\n                                >\n                                    <X />\n                                </button>\n                            </div>\n                        </div>\n                         {/* Using scroll area directly from radix ui because it doesnt pass ref to viewport by default */}\n                        <ScrollAreaPrimitive.Root className=\"relative overflow-hidden flex-grow py-2 px-3 \">\n                            <ScrollAreaPrimitive.Viewport ref={scrollViewportRef} className=\"h-full w-full rounded-[inherit]\">\n                                {messages.map((m: any, index: number) => <div key={index}>{m}</div>)}\n                            </ScrollAreaPrimitive.Viewport>\n                            <ScrollAreaPrimitive.Scrollbar />\n                            <ScrollAreaPrimitive.Corner />\n                        </ScrollAreaPrimitive.Root>\n                        <div className=\"w-full\">\n                            <div className=\"flex\">\n                                <Input type='text' ref={inputRef} className=\"h-12 rounded-r-none\" value={input}\n                                    onChange={e => setInput(e.target.value)}\n                                    onKeyDown={(e) => {\n                                        if (e.key === 'Enter') {\n                                            e.preventDefault();\n                                            onInput(input, currentStep);\n                                        }\n                                    }}\n                                    placeholder=\"Type your answer...\" />\n                                <Button className=\"h-12 rounded-l-none hover:bg-primary\" onClick={() => onInput(input, currentStep)} disabled={inputRef?.current?.disabled}>\n                                    <Send />\n                                </Button>\n                            </div>\n                            <div className=\"flex items-center justify-center gap-2 text-sm mt-2\">\n                                Built By\n                                <a href=\"https://shadfinity.sanjaybora.in\" target=\"_blank\" className=\"text-blue-600 hover:underline\">\n                                    Shadfinity</a>\n                                <img src=\"https://shadfinity.sanjaybora.in/favicon.ico\" className=\"w-4 h-4\" />\n                            </div>\n                        </div>\n                    </Card>\n                }\n            </div>\n        </div>\n    )\n}"
    }
  ]
}
{
  "$schema": "https://ui.shadcn.com/registry.json",
  "name": "chatbot",
  "type": "registry:component",
  "title": "Chatbot",
  "description": "A simple chatbot component with customisable flow",
  "registryDependencies": [
    "button","card","input"
  ],
  "dependencies": ["@radix-ui/react-scroll-area"],
  "author": "Sanjay bora",
  "files": [
    {
      "path": "components/chatbot.tsx",
      "target": "components/chatbot.tsx",
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport Chatbot from \"@/registry/chatbot\"\r\nimport { useState } from \"react\"\r\nimport { Button } from \"../ui/button\"\r\n\r\nfunction RickRoll({ onSubmit }: { onSubmit: any }) {\r\n    const [state,setState] = useState({\r\n        disabled:false\r\n    })\r\n    return (\r\n        <div>\r\n                <img src=\"https://gifdb.com/images/featured/rickroll-n9ut8v7peqq8bnen.gif\" className=\"h-44\" />\r\n                <div className=\"mt-2\">\r\n                    <div>I can do anything</div>\r\n                    <div className=\"mt-3 grid grid-cols-2 gap-2\">\r\n                    <Button onClick={() => { onSubmit('start');setState({disabled:true}) }} disabled={state.disabled}>Start Again</Button>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function ChatbotDemo() {\r\n    const [state, setState] = useState<any>()\r\n    return (\r\n        <Chatbot config={{\r\n            name: \"Chatbot\",\r\n            image: \"https://shadfinity.sanjaybora.in/images/chatbot.png\",\r\n            initialStep: 'start',\r\n            tooltip: 'Hello',\r\n            flow: {\r\n                start: {\r\n                    delay: 500,\r\n                    message: 'Hi, How may I help you?',\r\n                    options: ['What can you do?','Form example'],\r\n                    inputboxDisabled:true,\r\n                    next:(value:any)=>{\r\n                        if(value==\"What can you do?\"){\r\n                            return \"what_can_you_do\"\r\n                        }\r\n                        else if (value == \"Form example\") {\r\n                            return \"form_start\"\r\n                        }\r\n                        else {\r\n                            return \"start\"\r\n                        }\r\n                    }\r\n                },\r\n                what_can_you_do: {\r\n                    delay: 500,\r\n                    render: (onSubmit)=><RickRoll onSubmit={onSubmit}/>,\r\n                    next: 'start'\r\n                },\r\n                //form\r\n                form_start: {\r\n                    delay: 500,\r\n                    message: \"What is your name?\",\r\n                    validation: (value: any) => {\r\n                        if (value.length < 3) {\r\n                            return \"⚠️ Name must be atleast three characters long\"\r\n                        } else {\r\n                            setState((prev: any) => ({ ...prev, name: value }))\r\n                            return true\r\n                        }\r\n                    },\r\n                    next: \"ask_age\"\r\n                },\r\n                ask_age: {\r\n                    delay: 500,\r\n                    message: \"What is your age?\",\r\n                    validation: (value: any) => {\r\n                        if (isNaN(value)) {\r\n                            return \"⚠️ Age must be numeric\"\r\n                        } else if (value < 1 || value > 100) {\r\n                            return \"⚠️ Age can't be less than 1 or more than 100\"\r\n                        } else {\r\n                            setState((prev: any) => ({ ...prev, age: value }))\r\n                            return true\r\n                        }\r\n                    },\r\n                    next: 'form_finish'\r\n                },\r\n                form_finish: {\r\n                    delay: 500,\r\n                    message: `Thank you ${state?.name} for your response.\\n Your age - ${state?.age} has been recorded`,\r\n                    autoNext: true,\r\n                    next: () => {\r\n                        window.alert(`Name:${state?.name}\\nAge:${state?.age}`)\r\n                        return 'start'\r\n                    }\r\n                }\r\n            }\r\n        }} />\r\n    )\r\n}"
    },
    {
      "path": "components/ui/chatbot.tsx",
      "target": "components/ui/chatbot.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\r\nimport { RefreshCcw, Send, X } from \"lucide-react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { Card } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\r\n\r\ntype flowNode = {\r\n    message?: string,\r\n    options?: string[],\r\n    inputboxDisabled?: boolean,\r\n    validation?: ((value: any) => Promise<boolean | string> | boolean | string)\r\n    next?: string | ((value: any) => string),\r\n    delay?: number,\r\n    autoNext?: boolean,\r\n    render? : (onSubmit:any)=>React.ReactNode\r\n}\r\n\r\nexport type configType = {\r\n    name: string,\r\n    image?: string,\r\n    initialStep: string,\r\n    tooltip?: string,\r\n    defaultOpen?: {\r\n        open: boolean,\r\n        delay?: number\r\n    },\r\n    flow: {\r\n        [key: string]: flowNode\r\n    }\r\n}\r\n\r\nfunction Loader({ image }: { image: string }) {\r\n    return (\r\n        <div className=\"my-2 flex gap-2\">\r\n            <img src={image} className=\"bg-primary text-primary-foreground rounded-full w-10 h-10 flex-none border border-primary\" />\r\n            <div className=\"p-2 bg-secondary rounded-lg flex items-center gap-1\">\r\n                <div className=\"w-2 h-2 rounded-lg bg-primary animate-bounce\"></div>\r\n                <div className=\"w-2 h-2 rounded-lg bg-primary animate-bounce delay-100\"></div>\r\n                <div className=\"w-2 h-2 rounded-lg bg-primary animate-bounce delay-200\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction UserMessage({ msg }: { msg: any }) {\r\n    return (\r\n        <div className=\"flex justify-end my-2\">\r\n            <div className=\"bg-primary text-primary-foreground p-2 rounded-lg whitespace-pre-line\">\r\n                {msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Message({ message, image }: { message: any, image: string }) {\r\n    return (\r\n        <div className=\"flex gap-2 my-2\">\r\n            <img src={image} className=\"bg-primary text-primary-foreground rounded-full w-10 h-10 flex-none border border-primary\" />\r\n            <div>\r\n                <div className=\"p-2 bg-secondary rounded-lg rounded-b-none whitespace-break-spaces break-all\">{message}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction SingleChoice({ message,image,items, onClick }: { message:any,image:string,items: string[], onClick: any }) {\r\n    const [val, setVal] = useState('')\r\n    return (\r\n        <>\r\n        <div className=\"flex gap-2 my-2\">\r\n            <img src={image} className=\"bg-primary text-primary-foreground rounded-full w-10 h-10 flex-none border border-primary\" />\r\n            <div>\r\n                <div className=\"p-2 bg-secondary rounded-lg rounded-b-none whitespace-break-spaces break-all\">{message}</div>\r\n            </div>\r\n        </div>\r\n            <div className=\"flex flex-col gap-2\">\r\n                <div className=\"grid grid-cols-2 gap-3\">\r\n                        {\r\n                            items.map((item, index) => {\r\n                                return (\r\n                                    <div key={index} onClick={() => {\r\n                                        if (val == '') {\r\n                                            onClick(item);\r\n                                            setVal(item)\r\n                                        }\r\n                                    }} className=\"w-full\">\r\n                                        <Button className=\"flex w-full h-full flex-col py-2 px-2 hover:shadow-md text-wrap\" variant={val == item ? 'default' : \"outline\"}>\r\n                                            {item}\r\n                                        </Button>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction CustomComponent({ component, image }: { component: any, image: string }) {\r\n    return (\r\n        <div className=\"flex gap-2 my-2\">\r\n            <img src={image} className=\"bg-primary text-primary-foreground rounded-full w-10 h-10 flex-none border border-primary\" />\r\n            <div>\r\n                <div className=\"p-2 bg-secondary rounded-lg rounded-b-none whitespace-break-spaces break-all\">{component}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function Chatbot({ config }: { config: configType }) {\r\n    const configRef = useRef<configType>(config)\r\n    const scrollViewportRef = useRef<any>(null)\r\n    const lastItemRef = useRef<any>(null)\r\n    const inputRef = useRef<any>(null)\r\n    const [open, setOpen] = useState(false)\r\n    const [messages, setMessages] = useState<any>([])\r\n    const [input, setInput] = useState('')\r\n    const [currentStep, setCurrentStep] = useState<string>(configRef.current.initialStep)\r\n\r\n    async function validate(val: any, _step: string) {\r\n        const step = configRef.current.flow[_step]\r\n        const v = await step.validation?.(val)\r\n        if (v == true) {\r\n            return true\r\n        } else if (v == false) {\r\n            setMessages((prev: any) => ([...prev, <Message image={configRef.current.image!} message={'⚠️Invalid Input!! Try again'} key={prev.length} />]))\r\n            return false\r\n        } else {\r\n            setMessages((prev: any) => ([...prev, <Message image={configRef.current.image!} message={v} key={prev.length} />]))\r\n            return false\r\n        }\r\n    }\r\n\r\n    async function onSubmit(val: any, _step: string) {\r\n        const step = configRef.current.flow[_step]\r\n        // validation\r\n        if (step.validation) {\r\n            if (await validate(val, _step) != true) {\r\n                return\r\n            }\r\n        }\r\n\r\n        // get next step\r\n        const nextStep = (typeof step.next === 'function' ? step.next(val) : step.next) || \"\"\r\n\r\n        // update messages\r\n        setMessages((prev: any) => ([...prev, <UserMessage msg={val} key={prev.length} />]))\r\n        addMessage(nextStep)\r\n\r\n        // update states\r\n        setCurrentStep(nextStep)\r\n        setInput('')\r\n    }\r\n\r\n    function addMessage(_step: string) {\r\n        const step = configRef.current.flow[_step]\r\n\r\n        // set input disabled\r\n        if (step.inputboxDisabled) { if (inputRef.current) inputRef.current.disabled = true }\r\n        else { if (inputRef.current) inputRef.current.disabled = false }\r\n\r\n        // add message\r\n        setMessages((prev: any) => ([...prev, <Loader key={prev.length} image={configRef.current.image!} />]))\r\n        setTimeout(() => {\r\n            setMessages((prev: any) => {\r\n                const m = prev.slice(0, -1);\r\n                if(step.render){\r\n                    m.push(<CustomComponent component={step.render((val:any)=>onSubmit(val,_step))} image={configRef.current.image!}/>)\r\n                }else{\r\n                    if (step.options) {\r\n                        m.push(<SingleChoice message={step.message} image={configRef.current.image!} items={step.options!} onClick={(val: any) => onSubmit(val, _step)} key={m.length} />)\r\n                    }\r\n                    else if(step.message) {\r\n                        m.push(<Message message={step.message} key={m.length} image={configRef.current.image!} />)\r\n                    }\r\n                }\r\n                return [...m]\r\n            })\r\n\r\n            if (step.autoNext) {\r\n                const nextStep = (typeof step.next === 'function' ? step.next('') : step.next) || ''\r\n                setCurrentStep(nextStep);\r\n                addMessage(nextStep)\r\n            }\r\n        }, step.delay)\r\n    }\r\n\r\n    function reload() {\r\n        setMessages([])\r\n        addMessage(config.initialStep)\r\n    }\r\n\r\n    let isMounted = false;\r\n    useEffect(() => {\r\n        if (!isMounted) {\r\n            // default open state\r\n            if (configRef.current.defaultOpen?.open) {\r\n                setTimeout(() => setOpen(true), configRef.current.defaultOpen?.delay)\r\n            }\r\n            // add first message\r\n            addMessage(currentStep)\r\n            isMounted = true\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => { configRef.current = config }, [config])\r\n\r\n    // scroll to bottom whenever messages are updated\r\n    useEffect(() => {\r\n        const viewport = scrollViewportRef.current;\r\n        const lastItem = lastItemRef.current\r\n        if (viewport&&lastItem) {\r\n            viewport.scrollTo({\r\n                top: lastItem.offsetTop-viewport.offsetTop,\r\n                behavior: \"smooth\", // Smooth scrolling effect\r\n            });\r\n        }\r\n    }, [messages])\r\n    return (\r\n        <div className=\"fixed z-50 bottom-5 right-5 sm:bottom-10 sm:right-10\">\r\n            <div className=\"relative\">\r\n                <button id=\"chatbot-trigger\" className=\"flex items-center gap-4\" onClick={() => setOpen(true)}>\r\n                    {configRef.current.tooltip &&\r\n                        <div className=\" bg-background p-2 shadow border rounded-xl rounded-br-none max-w-64\">{configRef.current.tooltip}</div>\r\n                    }\r\n                    <img src={configRef.current.image} className=\"w-16 h-16 object-cover rounded-full border border-primary\" />\r\n                </button>\r\n                {open &&\r\n                    <Card className={cn(\"absolute right-0  bottom-0 h-[75vh] max-h-[600px] w-[calc(100vw-40px)] sm:w-96 rounded-xl p-3 flex flex-col duration-300\", open && \"animate-in zoom-in slide-in-from-bottom slide-in-from-right\")}>\r\n                        <div className=\"bg-primary text-primary-foreground h-12 w-full rounded-xl flex justify-between p-2 px-3\">\r\n                            <div className=\"flex gap-3 items-center\">\r\n                                <img src={configRef.current.image} className=\"w-8 h-8 rounded-full\" />\r\n                                {configRef.current.name}\r\n                            </div>\r\n                            <div className=\"flex gap-2\">\r\n                                <button className=\"hover:bg-primary-foreground hover:text-primary rounded-lg duration-300 p-1\"\r\n                                    onClick={() => reload()}\r\n                                >\r\n                                    <RefreshCcw />\r\n                                </button>\r\n                                <button className=\"hover:bg-primary-foreground hover:text-primary rounded-lg duration-300 p-1\"\r\n                                    onClick={() => setOpen(false)}\r\n                                >\r\n                                    <X />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                         {/* Using scroll area directly from radix ui because it doesnt pass ref to viewport by default */}\r\n                        <ScrollAreaPrimitive.Root className=\"relative overflow-hidden flex-grow py-2 px-3 \">\r\n                            <ScrollAreaPrimitive.Viewport ref={scrollViewportRef} className=\"h-full w-full rounded-[inherit]\">\r\n                                {messages.map((m: any, index: number) => <div ref={index===messages.length-1?lastItemRef:null} key={index}>{m}</div>)}\r\n                            </ScrollAreaPrimitive.Viewport>\r\n                            <ScrollAreaPrimitive.Scrollbar orientation=\"vertical\" />\r\n                            <ScrollAreaPrimitive.Corner />\r\n                        </ScrollAreaPrimitive.Root>\r\n                        <div className=\"w-full\">\r\n                            <div className=\"flex\">\r\n                                <Input type='text' ref={inputRef} className=\"h-12 rounded-r-none\" value={input}\r\n                                    onChange={e => setInput(e.target.value)}\r\n                                    onKeyDown={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            e.preventDefault();\r\n                                            onSubmit(input, currentStep);\r\n                                        }\r\n                                    }}\r\n                                    placeholder=\"Type your answer...\" />\r\n                                <Button className=\"h-12 rounded-l-none hover:bg-primary\" onClick={() => onSubmit(input, currentStep)} disabled={inputRef?.current?.disabled}>\r\n                                    <Send />\r\n                                </Button>\r\n                            </div>\r\n                            <div className=\"flex items-center justify-center gap-2 text-sm mt-2\">\r\n                                Built By\r\n                                <a href=\"https://shadfinity.sanjaybora.in\" target=\"_blank\" className=\"text-blue-600 hover:underline\">\r\n                                    Shadfinity</a>\r\n                                <img src=\"https://shadfinity.sanjaybora.in/favicon.ico\" className=\"w-4 h-4\" />\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}"
    }
  ]
}
{
    "$schema": "https://ui.shadcn.com/registry.json",
    "name": "text-to-speech-widgit",
    "type": "registry:component",
    "title": "Text to Speech Widgit",
    "description": "Text to speech widgit for blog and article pages",
    "registryDependencies": [
      "select","dialog"
    ],
    "dependencies": ["@radix-ui/react-scroll-area"],
    "author": "Sanjay bora",
    "files": [
      {
        "path": "components/tts.tsx",
        "target": "components/tts.tsx",
        "type": "registry:component",
        "content": "import TTSWidgit from \"@/components/ui/tts-widgit\";\n\nexport default function TTS() {\n    return (\n        <div className=\"flex flex-col items-center gap-3\">\n\n            <TTSWidgit />\n            <div id=\"content\" className=\"px-3\">\n                <p>This is a text to speech widgit. To use it follow the following instructions:-</p>\n                <div className=\"\">\n                    <ul className=\"list-disc pl-5 space-y-2 mt-3\">\n                        <li>\n                            <p>Wrap your content in a container with id \"#content\".</p>\n                        </li>\n                        <li>\n                            <p>The content you want to be read should be inside either a heading tag or a paragraph tag.</p>\n                        </li>\n                        <li>\n                            <p>Now add text-to-speech-widgit anywhere in your page.</p>\n                        </li>\n                        <li>\n                            <p>It will automatically detect all the content in your page and read the lines one by one.</p>\n                        </li>\n                    </ul>\n                </div>\n                <p></p>\n            </div>\n        </div>\n    )\n}"
      },
      {
        "path": "components/ui/tts-widgit/index.tsx",
        "target": "components/ui/tts-widgit/index.tsx",
        "type": "registry:ui",
        "content": "'use client'\nimport dynamic from 'next/dynamic';\nimport ErrorBoundary from './errorboundary';\n\n// Dynamically import the client-side component with `ssr: false`\nconst ClientSideComponent = dynamic(() => import('./tts-widgit'), {\n  ssr: false, // Ensures the component is only loaded on the client side\n});\n\nexport default function TTSWidgit(){\n  return (\n      <ErrorBoundary>\n        <ClientSideComponent />\n      </ErrorBoundary>\n  );\n};\n"
      },
      {
        "path": "components/ui/tts-widgit/errorboundary.tsx",
        "target": "components/ui/tts-widgit/errorboundary.tsx",
        "type": "registry:ui",
        "content": "\"use client\"\nimport React, { ReactNode, ErrorInfo } from 'react';\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(_: Error): ErrorBoundaryState {\n    // Update state so the next render shows the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // You can log the error to an error reporting service\n    console.error('Error caught by ErrorBoundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // Fallback UI when an error occurs\n      return <></>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;"
      },
      {
        "path": "components/ui/tts-widgit/tts-widgit.tsx",
        "target": "components/ui/tts-widgit/tts-widgit.tsx",
        "type": "registry:ui",
        "content": "'use client';\nimport { Pause, Play, Settings, SkipBack, SkipForward, Square } from 'lucide-react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';\nimport { cn } from '@/lib/utils';\n\nexport default function TextToSpeechWidgit() {\n    const allowedTags = ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7'];\n    const [voices, setVoices] = useState<SpeechSynthesisVoice[]>([]);\n    const [selectedVoice, setSelectedVoice] = useState<string>('0');\n    const [selectedSpeed, setSelectedSpeed] = useState<string>('1');\n    const [isActive, setIsActive] = useState<boolean>(false)\n    const [isPlaying, setIsPlaying] = useState<boolean>(false);\n    const [currentIndex, setCurrentIndex] = useState<number>(0);\n    const [currentPosition, setCurrentPosition] = useState<number>(0);\n\n    const linesRef = useRef<NodeListOf<HTMLElement>>(null);\n    const utteranceRef = useRef(new SpeechSynthesisUtterance());\n\n    // Initialize voices and lines\n    useEffect(() => {\n        if ('speechSynthesis' in window) {\n            const populateVoices = () => {\n                const voices = speechSynthesis.getVoices();\n                setVoices(voices);\n                if (voices.length > 0) {\n                    utteranceRef.current.voice = voices[parseInt(selectedVoice)];\n                }\n            };\n\n            populateVoices();\n            speechSynthesis.onvoiceschanged = populateVoices;\n\n            const selector = allowedTags.map((tag) => `#content ${tag}`).join(', ');\n            linesRef.current = document.querySelectorAll(selector);\n\n            utteranceRef.current.addEventListener('boundary', (e) => {\n                setCurrentPosition(e.charIndex);\n            });\n\n            return () => {\n                utteranceRef.current.removeEventListener('boundary', function (e) {\n                    setCurrentPosition(e.charIndex);\n                  });\n                speechSynthesis.cancel();\n                speechSynthesis.onvoiceschanged = null;\n            };\n        } else {\n            alert('Text-to-speech is not supported in this browser.');\n        }\n    }, []);\n\n    // Handle voice change\n    useEffect(() => {\n        if (voices.length > 0) {\n            utteranceRef.current.voice = voices[parseInt(selectedVoice)];\n        }\n    }, [selectedVoice, voices]);\n\n    // Handle speed change\n    useEffect(() => {\n        utteranceRef.current.rate = parseFloat(selectedSpeed);\n    }, [selectedSpeed]);\n\n    // Speak the current line\n    const speakLine = (index:number,position:number) => {\n        if (!linesRef.current) return;\n\n        const currentLine = linesRef.current[index];\n        const text = currentLine.textContent;\n\n        if (text) {\n            utteranceRef.current.text = text.substring(position);\n            speechSynthesis.speak(utteranceRef.current);\n\n            utteranceRef.current.onend = () => {\n                if (index < linesRef.current!.length - 2) {\n                    setCurrentIndex((prev) => prev + 1);\n                    setCurrentPosition(0);\n                    highlightLine(index + 1);\n                    speakLine(index+1,0);\n                } else {\n                    stop();\n                }\n            };\n        }\n    };\n\n    // Play or pause\n    const play = () => {\n        setIsActive(true)\n\n        highlightLine(currentIndex)\n        \n        if (isPlaying) {\n            speechSynthesis.pause();\n            setIsPlaying(false);\n        } else {\n            if (speechSynthesis.paused) {\n                speechSynthesis.resume();\n            } else {\n                speakLine(currentIndex,currentPosition);\n            }\n            setIsPlaying(true);\n        }\n    };\n\n    // Stop\n    const stop = () => {\n        speechSynthesis.cancel();\n        setIsActive(false);\n        setIsPlaying(false);\n        setCurrentIndex(0);\n        setCurrentPosition(0);\n        highlightLine(-1);\n    };\n\n    // Previous line\n    const previous = () => {\n        if (currentIndex > 0) {\n            setCurrentIndex((prev) => prev - 1);\n            setCurrentPosition(0);\n            highlightLine(currentIndex - 1);\n            if (isPlaying) {\n                speechSynthesis.cancel();\n                speakLine(currentIndex-1,0);\n            }\n        }\n    };\n\n    // Next line\n    const next = () => {\n        if (linesRef.current && currentIndex < linesRef.current.length - 1) {\n            setCurrentIndex((prev) => prev + 1);\n            setCurrentPosition(0);\n            highlightLine(currentIndex + 1);\n            if (isPlaying) {\n                speechSynthesis.cancel();\n                speakLine(currentIndex+1,0);\n            }\n        }\n    };\n\n    // Highlight the current line\n    const highlightLine = (index: number) => {\n        if (linesRef.current) {\n            linesRef.current.forEach((line, i) => {\n                line.style.backgroundColor = i === index ? '#78accc' : 'transparent';\n            });\n\n            const currentLine = linesRef.current[index];\n            currentLine.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n    };\n\n    return (\n        <div>\n            <div className={cn(\"flex gap-3 bg-gray-700 border rounded text-white p-2 w-fit\",isActive?\"fixed z-50 bottom-2 left-1/2 -translate-x-1/2\":\"\")}>\n                <button type=\"button\" title=\"Previous\" onClick={()=>previous()} className=\"outline-none hover:scale-125\">\n                    <SkipBack className='fill-current' />\n                </button>\n                <button type=\"button\" title=\"Stop\" onClick={()=>stop()} className={`outline-none hover:scale-125 ${isPlaying ? '' : 'hidden'}`}>\n                    <Square className='fill-current' />\n                </button>\n                <button type=\"button\" title=\"Play/Pause\" onClick={()=>play()} className=\"outline-none hover:scale-125\">\n                    {isPlaying ? <Pause className='fill-current' /> : <Play className='fill-current' />}\n                </button>\n                <button type=\"button\" title=\"Next\" onClick={()=>next()} className=\"outline-none hover:scale-125\">\n                    <SkipForward className='fill-current' />\n                </button>\n                <Dialog>\n                    <DialogTrigger className='hover:scale-125'>\n                        <Settings />\n                    </DialogTrigger>\n                    <DialogContent>\n                        <div>\n                            <div className='mb-2'>Speed:</div>\n                            <Select value={selectedSpeed} onValueChange={setSelectedSpeed}>\n                                <SelectTrigger>\n                                    <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    <SelectItem value=\"0.5\">0.5x</SelectItem>\n                                    <SelectItem value=\"1\">1x</SelectItem>\n                                    <SelectItem value=\"1.5\">1.5x</SelectItem>\n                                    <SelectItem value=\"2\">2x</SelectItem>\n                                </SelectContent>\n                            </Select>\n                        </div>\n                        <div>\n                            <div className='mb-2'>Voices:</div>\n                            <Select value={selectedVoice} onValueChange={setSelectedVoice}>\n                                <SelectTrigger>\n                                    <SelectValue placeholder=\"Select Voice\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    {voices.map((voice, index) => (\n                                        <SelectItem key={index} value={`${index}`}>\n                                            {voice.name}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                        </div>\n                    </DialogContent>\n                </Dialog>\n            </div>\n        </div>\n    );\n}"
      },
      {
        "path": "ui/select.tsx",
        "target": "components/ui/select.tsx",
        "type": "registry:ui"
      },
      {
        "path": "ui/dialog.tsx",
        "target": "components/ui/dialog.tsx",
        "type": "registry:ui"
      }
    ]
  }